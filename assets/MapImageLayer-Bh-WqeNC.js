import{dX as $,eD as O,dZ as T,l as P,f as E,g as L,i as F,dY as M,ei as R,eh as J,eE as N,m as _,ev as v,e9 as g,eF as x,eG as j,eH as q,U as f,b5 as U,eI as A,ed as k,eJ as V,k as S,Y as Z,e as i,y as o,eK as I,q as z,aZ as D,w as G,a as H,x as K,eL as B}from"./index-FXsJ6CNr.js";import{m as C,f as W,t as Y}from"./SublayersOwner-D7LT95om.js";import{t as X}from"./imageBitmapUtils-BLFUmUQy.js";import"./QueryTask-BGaAhnLs.js";import"./executeForIds-RSnoFP76.js";import"./executeQueryPBF-edRBu-7f.js";let a=class extends $(O(T(C(W(P(E(L(F(M(R(J(K)))))))))))){constructor(...e){super(...e),this._exportImageParameters=new N({layer:this}),this.dateFieldsTimeZone=null,this.datesInUnknownTimezone=!1,this.dpi=96,this.gdbVersion=null,this.imageFormat="png24",this.imageMaxHeight=2048,this.imageMaxWidth=2048,this.imageTransparency=!0,this.isReference=null,this.labelsVisible=!1,this.operationalLayerType="ArcGISMapServiceLayer",this.preferredTimeZone=null,this.sourceJSON=null,this.sublayers=null,this.type="map-image",this.url=null}normalizeCtorArgs(e,r){return typeof e=="string"?{url:e,...r}:e}load(e){const r=e!=null?e.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Map Service"]},e).catch(_).then(()=>this._fetchService(r))),Promise.resolve(this)}destroy(){this._exportImageParameters.destroy()}readImageFormat(e,r){const p=r.supportedImageFormatTypes;return p&&p.includes("PNG32")?"png32":"png24"}writeSublayers(e,r,p,t){var m,c,b;if(!this.loaded||!e)return;const s=e.slice().reverse().flatten(({sublayers:l})=>l&&l.toArray().reverse()).toArray();let n=!1;const h=v(t.origin);if((m=this.capabilities)!=null&&m.operations.supportsExportMap&&((b=(c=this.capabilities)==null?void 0:c.exportMap)!=null&&b.supportsDynamicLayers)){if(h===g.PORTAL_ITEM){const l=this.createSublayersForOrigin("service").sublayers;n=x(s,l,g.SERVICE)}else if(h>g.PORTAL_ITEM){const l=this.createSublayersForOrigin("portal-item");n=x(s,l.sublayers,v(l.origin))}}const d=[],u={writeSublayerStructure:n,...t};let y=n||this.hasVisibleLayersForOrigin(h);s.forEach(l=>{const w=l.write({},u);d.push(w),y=y||l.originOf("visible")==="user"}),d.some(l=>Object.keys(l).length>1)&&(r.layers=d),y&&(r.visibleLayers=s.filter(l=>l.visible).map(l=>l.id))}createExportImageParameters(e,r,p,t){const s=(t==null?void 0:t.pixelRatio)||1;e&&this.version>=10&&(e=e.clone().shiftCentralMeridian()),this._exportImageParameters.floors=(t==null?void 0:t.floors)??null,this._exportImageParameters.scale=j({extent:e,width:r})*s;const n=this._exportImageParameters.toJSON(),h=!(t!=null&&t.rotation)||this.version<10.3?{}:{rotation:-t.rotation},d=e==null?void 0:e.spatialReference,u=q(d);n.dpi*=s;const y={};if(t!=null&&t.timeExtent){const{start:m,end:c}=t.timeExtent.toJSON();y.time=m&&c&&m===c?""+m:`${m??"null"},${c??"null"}`}else this.timeInfo&&!this.timeInfo.hasLiveData&&(y.time="null,null");return{bbox:e&&e.xmin+","+e.ymin+","+e.xmax+","+e.ymax,bboxSR:u,imageSR:u,size:r+","+p,...n,...h,...y}}async fetchImage(e,r,p,t){const{data:s}=await this._fetchImage("image",e,r,p,t);return s}async fetchImageBitmap(e,r,p,t){const{data:s,url:n}=await this._fetchImage("blob",e,r,p,t);return X(s,n,t==null?void 0:t.signal)}async fetchRecomputedExtents(e={}){const r={...e,query:{returnUpdates:!0,f:"json",...this.customParameters,token:this.apiKey}},{data:p}=await f(this.url,r),{extent:t,fullExtent:s,timeExtent:n}=p,h=t||s;return{fullExtent:h&&U.fromJSON(h),timeExtent:n&&A.fromJSON({start:n[0],end:n[1]})}}loadAll(){return k(this,e=>{e(this.allSublayers),e(this.subtables)})}serviceSupportsSpatialReference(e){return V(this,e)}async _fetchImage(e,r,p,t,s){var d,u,y;const n={responseType:e,signal:(s==null?void 0:s.signal)??null,query:{...this.parsedUrl.query,...this.createExportImageParameters(r,p,t,s),f:"image",...this.refreshParameters,...this.customParameters,token:this.apiKey}},h=this.parsedUrl.path+"/export";if(((d=n.query)==null?void 0:d.dynamicLayers)!=null&&!((y=(u=this.capabilities)==null?void 0:u.exportMap)!=null&&y.supportsDynamicLayers))throw new S("mapimagelayer:dynamiclayer-not-supported",`service ${this.url} doesn't support dynamic layers, which is required to be able to change the sublayer's order, rendering, labeling or source.`,{query:n.query});try{const{data:m}=await f(h,n);return{data:m,url:h}}catch(m){throw Z(m)?m:new S("mapimagelayer:image-fetch-error",`Unable to load image: ${h}`,{error:m})}}async _fetchService(e){if(this.sourceJSON)return void this.read(this.sourceJSON,{origin:"service",url:this.parsedUrl});const{data:r,ssl:p}=await f(this.parsedUrl.path,{query:{f:"json",...this.parsedUrl.query,...this.customParameters,token:this.apiKey},signal:e});p&&(this.url=this.url.replace(/^http:/i,"https:")),this.sourceJSON=r,this.read(r,{origin:"service",url:this.parsedUrl})}hasVisibleLayersForOrigin(e){var r;return!(e==null||!((r=this.sublayersSourceJSON[e])!=null&&r.visibleLayers))}};i([o(I("dateFieldsTimeReference"))],a.prototype,"dateFieldsTimeZone",void 0),i([o({type:Boolean})],a.prototype,"datesInUnknownTimezone",void 0),i([o()],a.prototype,"dpi",void 0),i([o()],a.prototype,"gdbVersion",void 0),i([o()],a.prototype,"imageFormat",void 0),i([z("imageFormat",["supportedImageFormatTypes"])],a.prototype,"readImageFormat",null),i([o({json:{origins:{service:{read:{source:"maxImageHeight"}}}}})],a.prototype,"imageMaxHeight",void 0),i([o({json:{origins:{service:{read:{source:"maxImageWidth"}}}}})],a.prototype,"imageMaxWidth",void 0),i([o()],a.prototype,"imageTransparency",void 0),i([o({type:Boolean,json:{read:!1,write:{enabled:!0,overridePolicy:()=>({enabled:!1})}}})],a.prototype,"isReference",void 0),i([o({json:{read:!1,write:!1}})],a.prototype,"labelsVisible",void 0),i([o({type:["ArcGISMapServiceLayer"]})],a.prototype,"operationalLayerType",void 0),i([o({json:{read:!1,write:!1}})],a.prototype,"popupEnabled",void 0),i([o(I("preferredTimeReference"))],a.prototype,"preferredTimeZone",void 0),i([o()],a.prototype,"sourceJSON",void 0),i([o({json:{write:{ignoreOrigin:!0}}})],a.prototype,"sublayers",void 0),i([D("sublayers",{layers:{type:[Y]},visibleLayers:{type:[B]}})],a.prototype,"writeSublayers",null),i([o({type:["show","hide","hide-children"]})],a.prototype,"listMode",void 0),i([o({json:{read:!1},readOnly:!0,value:"map-image"})],a.prototype,"type",void 0),i([o(G)],a.prototype,"url",void 0),a=i([H("esri.layers.MapImageLayer")],a);const se=a;export{se as default};
