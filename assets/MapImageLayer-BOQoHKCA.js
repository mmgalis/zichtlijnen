import{dn as T,ef as $,ds as O,dR as P,dq as L,dr as E,dt as F,dp as M,dT as R,dS as N,eg as j,du as J,e7 as v,dJ as g,eh as x,ei as U,ej as _,dv as f,aU as q,ek as A,dN as k,el as V,a4 as S,A as z,e as i,y as o,em as I,dx as G,aL as Z,dA as B,a as C,G as D,en as H}from"./index-2x4JY06U.js";import{m as K,f as W,t as Q}from"./SublayersOwner-B1maThQ3.js";import{t as X}from"./imageBitmapUtils-CjPVugzM.js";import"./QueryTask-dSIIOeJB.js";import"./executeForIds-DdesqYq-.js";import"./executeQueryPBF-BdPqXMn9.js";let a=class extends T($(O(K(W(P(L(E(F(M(R(N(D)))))))))))){constructor(...e){super(...e),this._exportImageParameters=new j({layer:this}),this.dateFieldsTimeZone=null,this.datesInUnknownTimezone=!1,this.dpi=96,this.gdbVersion=null,this.imageFormat="png24",this.imageMaxHeight=2048,this.imageMaxWidth=2048,this.imageTransparency=!0,this.isReference=null,this.labelsVisible=!1,this.operationalLayerType="ArcGISMapServiceLayer",this.preferredTimeZone=null,this.sourceJSON=null,this.sublayers=null,this.type="map-image",this.url=null}normalizeCtorArgs(e,r){return typeof e=="string"?{url:e,...r}:e}load(e){const r=e!=null?e.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Map Service"]},e).catch(J).then(()=>this._fetchService(r))),Promise.resolve(this)}destroy(){this._exportImageParameters.destroy()}readImageFormat(e,r){const p=r.supportedImageFormatTypes;return p&&p.includes("PNG32")?"png32":"png24"}writeSublayers(e,r,p,t){var d,c,b;if(!this.loaded||!e)return;const s=e.slice().reverse().flatten(({sublayers:l})=>l&&l.toArray().reverse()).toArray();let n=!1;const m=v(t.origin);if((d=this.capabilities)!=null&&d.operations.supportsExportMap&&((b=(c=this.capabilities)==null?void 0:c.exportMap)!=null&&b.supportsDynamicLayers)){if(m===g.PORTAL_ITEM){const l=this.createSublayersForOrigin("service").sublayers;n=x(s,l,g.SERVICE)}else if(m>g.PORTAL_ITEM){const l=this.createSublayersForOrigin("portal-item");n=x(s,l.sublayers,v(l.origin))}}const y=[],u={writeSublayerStructure:n,...t};let h=n||this.hasVisibleLayersForOrigin(m);s.forEach(l=>{const w=l.write({},u);y.push(w),h=h||l.originOf("visible")==="user"}),y.some(l=>Object.keys(l).length>1)&&(r.layers=y),h&&(r.visibleLayers=s.filter(l=>l.visible).map(l=>l.id))}createExportImageParameters(e,r,p,t){const s=(t==null?void 0:t.pixelRatio)||1;e&&this.version>=10&&(e=e.clone().shiftCentralMeridian()),this._exportImageParameters.floors=(t==null?void 0:t.floors)??null,this._exportImageParameters.scale=U({extent:e,width:r})*s;const n=this._exportImageParameters.toJSON(),m=!(t!=null&&t.rotation)||this.version<10.3?{}:{rotation:-t.rotation},y=e==null?void 0:e.spatialReference,u=_(y);n.dpi*=s;const h={};if(t!=null&&t.timeExtent){const{start:d,end:c}=t.timeExtent.toJSON();h.time=d&&c&&d===c?""+d:`${d??"null"},${c??"null"}`}else this.timeInfo&&!this.timeInfo.hasLiveData&&(h.time="null,null");return{bbox:e&&e.xmin+","+e.ymin+","+e.xmax+","+e.ymax,bboxSR:u,imageSR:u,size:r+","+p,...n,...m,...h}}async fetchImage(e,r,p,t){const{data:s}=await this._fetchImage("image",e,r,p,t);return s}async fetchImageBitmap(e,r,p,t){const{data:s,url:n}=await this._fetchImage("blob",e,r,p,t);return X(s,n,t==null?void 0:t.signal)}async fetchRecomputedExtents(e={}){const r={...e,query:{returnUpdates:!0,f:"json",...this.customParameters,token:this.apiKey}},{data:p}=await f(this.url,r),{extent:t,fullExtent:s,timeExtent:n}=p,m=t||s;return{fullExtent:m&&q.fromJSON(m),timeExtent:n&&A.fromJSON({start:n[0],end:n[1]})}}loadAll(){return k(this,e=>{e(this.allSublayers),e(this.subtables)})}serviceSupportsSpatialReference(e){return V(this,e)}async _fetchImage(e,r,p,t,s){var y,u,h;const n={responseType:e,signal:(s==null?void 0:s.signal)??null,query:{...this.parsedUrl.query,...this.createExportImageParameters(r,p,t,s),f:"image",...this.refreshParameters,...this.customParameters,token:this.apiKey}},m=this.parsedUrl.path+"/export";if(((y=n.query)==null?void 0:y.dynamicLayers)!=null&&!((h=(u=this.capabilities)==null?void 0:u.exportMap)!=null&&h.supportsDynamicLayers))throw new S("mapimagelayer:dynamiclayer-not-supported",`service ${this.url} doesn't support dynamic layers, which is required to be able to change the sublayer's order, rendering, labeling or source.`,{query:n.query});try{const{data:d}=await f(m,n);return{data:d,url:m}}catch(d){throw z(d)?d:new S("mapimagelayer:image-fetch-error",`Unable to load image: ${m}`,{error:d})}}async _fetchService(e){if(this.sourceJSON)return void this.read(this.sourceJSON,{origin:"service",url:this.parsedUrl});const{data:r,ssl:p}=await f(this.parsedUrl.path,{query:{f:"json",...this.parsedUrl.query,...this.customParameters,token:this.apiKey},signal:e});p&&(this.url=this.url.replace(/^http:/i,"https:")),this.sourceJSON=r,this.read(r,{origin:"service",url:this.parsedUrl})}hasVisibleLayersForOrigin(e){var r;return!(e==null||!((r=this.sublayersSourceJSON[e])!=null&&r.visibleLayers))}};i([o(I("dateFieldsTimeReference"))],a.prototype,"dateFieldsTimeZone",void 0),i([o({type:Boolean})],a.prototype,"datesInUnknownTimezone",void 0),i([o()],a.prototype,"dpi",void 0),i([o()],a.prototype,"gdbVersion",void 0),i([o()],a.prototype,"imageFormat",void 0),i([G("imageFormat",["supportedImageFormatTypes"])],a.prototype,"readImageFormat",null),i([o({json:{origins:{service:{read:{source:"maxImageHeight"}}}}})],a.prototype,"imageMaxHeight",void 0),i([o({json:{origins:{service:{read:{source:"maxImageWidth"}}}}})],a.prototype,"imageMaxWidth",void 0),i([o()],a.prototype,"imageTransparency",void 0),i([o({type:Boolean,json:{read:!1,write:{enabled:!0,overridePolicy:()=>({enabled:!1})}}})],a.prototype,"isReference",void 0),i([o({json:{read:!1,write:!1}})],a.prototype,"labelsVisible",void 0),i([o({type:["ArcGISMapServiceLayer"]})],a.prototype,"operationalLayerType",void 0),i([o({json:{read:!1,write:!1}})],a.prototype,"popupEnabled",void 0),i([o(I("preferredTimeReference"))],a.prototype,"preferredTimeZone",void 0),i([o()],a.prototype,"sourceJSON",void 0),i([o({json:{write:{ignoreOrigin:!0}}})],a.prototype,"sublayers",void 0),i([Z("sublayers",{layers:{type:[Q]},visibleLayers:{type:[H]}})],a.prototype,"writeSublayers",null),i([o({type:["show","hide","hide-children"]})],a.prototype,"listMode",void 0),i([o({json:{read:!1},readOnly:!0,value:"map-image"})],a.prototype,"type",void 0),i([o(B)],a.prototype,"url",void 0),a=i([C("esri.layers.MapImageLayer")],a);const se=a;export{se as default};
