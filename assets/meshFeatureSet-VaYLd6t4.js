import{b4 as h,aB as b,F as d,b5 as y,b6 as m,b7 as S,b8 as D,b9 as N,ba as g,bb as M,bc as w,D as F}from"./index-FXsJ6CNr.js";const T=()=>F.getLogger("esri.rest.support.meshFeatureSet");function G(t,e,s){const n=s.features;s.features=[],delete s.geometryType;const r=h.fromJSON(s);if(r.geometryType="mesh",!s.assetMaps)return r;const a=x(e,s.assetMaps),i=t.sourceSpatialReference??b.WGS84,l=s.globalIdFieldName,{outFields:o}=t,f=o!=null&&o.length>0?I(o.includes("*")?null:new Set(o)):()=>({});for(const u of n){const c=L(u,l,i,e,a);r.features.push(new d({geometry:c,attributes:f(u)}))}return r}function I(t){return({attributes:e})=>{if(!e)return{};if(!t)return e;for(const s in e)t.has(s)||delete e[s];return e}}function L(t,e,s,n,r){const a=t.attributes[e],i=r.get(a);if(i==null||!t.geometry)return null;const l=O(t,s,n),o=y.fromJSON(t.geometry);o.spatialReference=s;const f=$(t.attributes,n),u=s.isGeographic?"local":"georeferenced",c=A(i);return c?m.createWithExternalSource(l,c,{extent:o,transform:f,vertexSpace:u}):m.createIncomplete(l,{extent:o,transform:f,vertexSpace:u})}function O({attributes:t},e,{transformFieldRoles:s}){const n=t[s.originX],r=t[s.originY],a=t[s.originZ];return new S({x:n,y:r,z:a,spatialReference:e})}function $(t,{transformFieldRoles:e}){return new D({translation:[t[e.translationX],-t[e.translationZ],t[e.translationY]],rotationAxis:[t[e.rotationX],-t[e.rotationZ],t[e.rotationY]],rotationAngle:t[e.rotationDeg],scale:[t[e.scaleX],t[e.scaleZ],t[e.scaleY]]})}var p;function x(t,e){const s=new Map;for(const n of e){const r=n.parentGlobalId;if(r==null)continue;const a=n.assetName,i=n.assetType,l=n.assetHash,o=n.assetURL,f=n.conversionStatus,u=n.seqNo,c=N(i,t.supportedFormats);if(!c){T().error("mesh-feature-set:unknown-format",`Service returned an asset of type ${i}, but it does not list it as a supported type`);continue}const E=g(s,r,()=>({files:new Map}));g(E.files,a,()=>({name:a,type:i,mimeType:c,status:P(f),parts:[]})).parts[u]={hash:l,url:o}}return s}function A(t){const e=Array.from(t.files.values()),s=new Array;for(const n of e){if(n.status!==p.COMPLETED)return null;const r=new Array;for(const a of n.parts){if(!a)return null;r.push(new M(a.url,a.hash))}s.push(new w(n.name,n.mimeType,r))}return s}function P(t){switch(t){case"COMPLETED":case"SUBMITTED":return p.COMPLETED;case"INPROGRESS":return p.PENDING;default:return p.FAILED}}(function(t){t[t.FAILED=0]="FAILED",t[t.PENDING=1]="PENDING",t[t.COMPLETED=2]="COMPLETED"})(p||(p={}));export{x as assetMapFromAssetMapsJSON,L as extractMesh,G as meshFeatureSetFromJSON};
